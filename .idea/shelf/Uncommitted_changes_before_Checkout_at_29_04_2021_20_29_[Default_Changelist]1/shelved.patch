Index: ServerJMusicHub/ServerJMusicHub.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"JAVA_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">\r\n    <exclude-output />\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src\" isTestSource=\"false\" />\r\n    </content>\r\n    <orderEntry type=\"inheritedJdk\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n    <orderEntry type=\"module\" module-name=\"JMusicHub\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ServerJMusicHub/ServerJMusicHub.iml b/ServerJMusicHub/ServerJMusicHub.iml
--- a/ServerJMusicHub/ServerJMusicHub.iml	
+++ b/ServerJMusicHub/ServerJMusicHub.iml	
@@ -5,7 +5,7 @@
     <content url="file://$MODULE_DIR$">
       <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
     </content>
-    <orderEntry type="inheritedJdk" />
+    <orderEntry type="jdk" jdkName="openjdk-16" jdkType="JavaSDK" />
     <orderEntry type="sourceFolder" forTests="false" />
     <orderEntry type="module" module-name="JMusicHub" />
   </component>
Index: src/View/MainClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package View;\r\n\r\nimport Controller.SimpleClient;\r\nimport Controller.AudioClient;\r\nimport Model.Student;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintWriter;\r\nimport java.net.Socket;\r\nimport java.util.Scanner;\r\n\r\npublic class MainClient {\r\n\r\n    public static void main(String[] args) throws IOException {\r\n\r\n        final String SERVER_IP =\"localhost\";\r\n\r\n       SimpleClient c1 = new SimpleClient();\r\n       AudioClient c2 = new AudioClient();\r\n\r\n      System.out.println(\"> [CLIENT] Type h for available commands\");\r\n\r\n        Scanner scan = new Scanner(System.in);\r\n        String choice = scan.nextLine();\r\n\r\n        String albumTitle = null;\r\n        String playlistTitle = null;\r\n        String musicTitle = null;\r\n        boolean indicate =true;\r\n\r\n        if (choice.length() == 0) System.exit(0);\r\n        while (true) \t{\r\n            switch (choice.charAt(0)) {\r\n                case 'h':\r\n                    printAvailableCommands();\r\n                    choice = scan.nextLine();\r\n                    break;\r\n                case 't':\r\n                    //album titles, ordered by date\r\n                    //c1.connect(SERVER_IP,choice);\r\n                    musicTitle = scan.nextLine();\r\n\r\n                  /*   AudioClient a1 = new AudioClient();\r\n                    try {\r\n                        a1.init();\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }*/\r\n\r\n                    printAvailableCommands();\r\n                    choice = scan.nextLine();\r\n                    break;\r\n                case 'g':\r\n                    //songs of an album, sorted by genre\r\n                    System.out.println(\"> Songs of an album sorted by genre will be displayed; enter the album name, available albums are:\");\r\n                    c1.connect(SERVER_IP,\"t\");\r\n                    albumTitle = scan.nextLine();\r\n                        //System.out.println(\"theHub.getAlbumSongsSortedByGenre(albumTitle)\"); // Pareil ici\r\n\r\n                    System.out.println(\"> Songs of the album : \");\r\n                    c1.connect(SERVER_IP,\"o\"+albumTitle);\r\n\r\n                    System.out.println(\"what song do you want to play ? \");\r\n\r\n                    musicTitle = scan.nextLine();\r\n                    c1.connect(SERVER_IP,\"l\"+musicTitle);\r\n\r\n\r\n                    try {\r\n                        c2.init();\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n\r\n\r\n                    printAvailableCommands();\r\n                    choice = scan.nextLine();\r\n                    break;\r\n\r\n                case 'p':\r\n                    //playlist list\r\n                    System.out.println(\"> Playlist list :\");\r\n                    c1.connect(SERVER_IP,\"p\");\r\n                    playlistTitle = scan.nextLine();\r\n                    //System.out.println(\"theHub.getAlbumSongsSortedByGenre(albumTitle)\"); // Pareil ici\r\n\r\n                    System.out.println(\"> Songs of the playlist : \");\r\n                    c1.connect(SERVER_IP,\"i\"+playlistTitle);\r\n\r\n                    System.out.println(\"what song do you want to play ? \");\r\n\r\n                    musicTitle = scan.nextLine();\r\n                    c1.connect(SERVER_IP,\"l\"+musicTitle);\r\n\r\n\r\n                    try {\r\n                        c2.init();\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n\r\n\r\n                    printAvailableCommands();\r\n                    choice = scan.nextLine();\r\n                    break;\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    private static void printAvailableCommands() {\r\n        System.out.println(\"> t: display the album titles, ordered by date\");\r\n        System.out.println(\"> g: display songs of an album, ordered by genre\");\r\n        System.out.println(\"> d: display songs of an album\");\r\n        System.out.println(\"> p: display playlist\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/View/MainClient.java b/src/View/MainClient.java
--- a/src/View/MainClient.java	
+++ b/src/View/MainClient.java	
@@ -54,10 +54,9 @@
                     break;
                 case 'g':
                     //songs of an album, sorted by genre
-                    System.out.println("> Songs of an album sorted by genre will be displayed; enter the album name, available albums are:");
+                    System.out.println("> Songs of an album sorted by genre will be displayed.\n Enter the album name, available albums are:");
                     c1.connect(SERVER_IP,"t");
                     albumTitle = scan.nextLine();
-                        //System.out.println("theHub.getAlbumSongsSortedByGenre(albumTitle)"); // Pareil ici
 
                     System.out.println("> Songs of the album : ");
                     c1.connect(SERVER_IP,"o"+albumTitle);
Index: ServerJMusicHub/src/View/commandController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package View;\r\n\r\n\r\nimport Controller.MusicHubController;\r\nimport Model.*;\r\nimport Model.Exceptions.NoAlbumFoundException;\r\nimport Model.Exceptions.NoElementFoundException;\r\nimport Model.Exceptions.NoPlayListFoundException;\r\n\r\nimport java.util.Iterator;\r\nimport java.util.Scanner;\r\n\r\npublic class commandController {\r\n\r\n    MusicHubController theHub = new MusicHubController ();\r\n\r\n    Scanner scan = new Scanner(System.in);\r\n\r\n    String albumTitle = null;\r\n    String choice;\r\n\r\n\r\n    public void t() {\r\n        //album titles, ordered by date\r\n        System.out.println(theHub.getAlbumsTitlesSortedByDate());\r\n    }\r\n\r\n    public void g() {\r\n        //songs of an album, sorted by genre\r\n        System.out.println(\"Songs of an album sorted by genre will be displayed; enter the album name, available albums are:\");\r\n        System.out.println(theHub.getAlbumsTitlesSortedByDate());\r\n        System.out.print(\"album : \");\r\n        albumTitle = scan.nextLine();\r\n        try {\r\n            System.out.println(theHub.getAlbumSongsSortedByGenre(albumTitle));\r\n        } catch (NoAlbumFoundException ex) {\r\n            System.out.println(\"No album found with the requested title \" + ex.getMessage());\r\n        }\r\n    }\r\n\r\n    public void d() {\r\n        //songs of an album\r\n        System.out.println(\"Songs of an album will be displayed; enter the album name, available albums are:\");\r\n        System.out.println(theHub.getAlbumsTitlesSortedByDate());\r\n        System.out.print(\"album : \");\r\n        albumTitle = scan.nextLine();\r\n        try {\r\n            System.out.println(theHub.getAlbumSongs(albumTitle));\r\n        } catch (NoAlbumFoundException ex) {\r\n            System.out.println(\"No album found with the requested title \" + ex.getMessage());\r\n        }\r\n\r\n    }\r\n\r\n    public void u() {\r\n        //audiobooks ordered by author\r\n        System.out.println(theHub.getAudiobooksTitlesSortedByAuthor());\r\n    }\r\n\r\n    public void c() {\r\n        // add a new song\r\n        System.out.println(\"Enter a new song: \");\r\n        System.out.println(\"Song title: \");\r\n        String title = scan.nextLine();\r\n        System.out.println(\"Song genre (jazz, classic, hiphop, rock, pop, rap):\");\r\n        String genre = scan.nextLine();\r\n        System.out.println(\"Song artist: \");\r\n        String artist = scan.nextLine();\r\n        System.out.println (\"Song length in seconds: \");\r\n        int length = Integer.parseInt(scan.nextLine());\r\n        System.out.println(\"Song content: \");\r\n        String content = scan.nextLine();\r\n        Song s = new Song (title, artist, length, content, genre);\r\n        theHub.addElement(s);\r\n        System.out.println(\"New element list: \");\r\n        Iterator<AudioElement> it = theHub.elements();\r\n        while (it.hasNext()) System.out.println(it.next().getTitle());\r\n        System.out.println(\"Song created!\");\r\n    }\r\n\r\n    public void a() {\r\n        // add a new album\r\n        System.out.println(\"Enter a new album: \");\r\n        System.out.println(\"Album title: \");\r\n        String aTitle = scan.nextLine();\r\n        System.out.println(\"Album artist: \");\r\n        String aArtist = scan.nextLine();\r\n        System.out.println (\"Album length in seconds: \");\r\n        int aLength = Integer.parseInt(scan.nextLine());\r\n        System.out.println(\"Album date as YYYY-DD-MM: \");\r\n        String aDate = scan.nextLine();\r\n        Album a = new Album(aTitle, aArtist, aLength, aDate);\r\n        theHub.addAlbum(a);\r\n        System.out.println(\"New list of albums: \");\r\n        Iterator<Album> ita = theHub.albums();\r\n        while (ita.hasNext()) System.out.println(ita.next().getTitle());\r\n        System.out.println(\"Album created!\");\r\n    }\r\n\r\n    public void plus() {\r\n        //add a song to an album:\r\n        System.out.println(\"Add an existing song to an existing album\");\r\n        System.out.println(\"Type the name of the song you wish to add. Available songs: \");\r\n        Iterator<AudioElement> itae = theHub.elements();\r\n        while (itae.hasNext()) {\r\n            AudioElement ae = itae.next();\r\n            if ( ae instanceof Song) System.out.println(ae.getTitle());\r\n        }\r\n        String songTitle = scan.nextLine();\r\n\r\n        System.out.println(\"Type the name of the album you wish to enrich. Available albums: \");\r\n        Iterator<Album> ait = theHub.albums();\r\n        while (ait.hasNext()) {\r\n            Album al = ait.next();\r\n            System.out.println(al.getTitle());\r\n        }\r\n        String titleAlbum = scan.nextLine();\r\n        try {\r\n            theHub.addElementToAlbum(songTitle, titleAlbum);\r\n        } catch (NoAlbumFoundException ex){\r\n            System.out.println (ex.getMessage());\r\n        } catch (NoElementFoundException ex){\r\n            System.out.println (ex.getMessage());\r\n        }\r\n        System.out.println(\"Song added to the album!\");\r\n    }\r\n\r\n    public void l() {\r\n        // add a new audiobook\r\n        System.out.println(\"Enter a new audiobook: \");\r\n        System.out.println(\"AudioBook title: \");\r\n        String bTitle = scan.nextLine();\r\n        System.out.println(\"AudioBook category (youth, novel, theater, documentary, speech)\");\r\n        String bCategory = scan.nextLine();\r\n        System.out.println(\"AudioBook artist: \");\r\n        String bArtist = scan.nextLine();\r\n        System.out.println (\"AudioBook length in seconds: \");\r\n        int bLength = Integer.parseInt(scan.nextLine());\r\n        System.out.println(\"AudioBook content: \");\r\n        String bContent = scan.nextLine();\r\n        System.out.println(\"AudioBook language (french, english, italian, spanish, german)\");\r\n        String bLanguage = scan.nextLine();\r\n        AudioBook b = new AudioBook (bTitle, bArtist, bLength, bContent, bLanguage, bCategory);\r\n        theHub.addElement(b);\r\n        System.out.println(\"Audiobook created! New element list: \");\r\n        Iterator<AudioElement> itl = theHub.elements();\r\n        while (itl.hasNext()) System.out.println(itl.next().getTitle());\r\n    }\r\n\r\n    public void p() {\r\n        //create a new playlist from existing elements\r\n        System.out.println(\"Add an existing song or audiobook to a new playlist\");\r\n        System.out.println(\"Existing playlists:\");\r\n        Iterator<PlayList> itpl = theHub.playlists();\r\n        while (itpl.hasNext()) {\r\n            PlayList pl = itpl.next();\r\n            System.out.println(pl.getTitle());\r\n        }\r\n        System.out.println(\"Type the name of the playlist you wish to create:\");\r\n        String playListTitle = scan.nextLine();\r\n        PlayList pl = new PlayList(playListTitle);\r\n        theHub.addPlaylist(pl);\r\n        System.out.println(\"Available elements: \");\r\n\r\n        Iterator<AudioElement> itael = theHub.elements();\r\n        while (itael.hasNext()) {\r\n            AudioElement ae = itael.next();\r\n            System.out.println(ae.getTitle());\r\n        }\r\n        while (choice.charAt(0)!= 'n') \t{\r\n            System.out.println(\"Type the name of the audio element you wish to add or 'n' to exit:\");\r\n            String elementTitle = scan.nextLine();\r\n            try {\r\n                theHub.addElementToPlayList(elementTitle, playListTitle);\r\n            } catch (NoPlayListFoundException ex) {\r\n                System.out.println (ex.getMessage());\r\n            } catch (NoElementFoundException ex) {\r\n                System.out.println (ex.getMessage());\r\n            }\r\n\r\n            System.out.println(\"Type y to add a new one, n to end\");\r\n            choice = scan.nextLine();\r\n        }\r\n        System.out.println(\"Playlist created!\");\r\n\r\n    }\r\n\r\n    public void moins() {\r\n        //delete a playlist\r\n        System.out.println(\"Delete an existing playlist. Available playlists:\");\r\n        Iterator<PlayList> itp = theHub.playlists();\r\n        while (itp.hasNext()) {\r\n            PlayList p = itp.next();\r\n            System.out.println(p.getTitle());\r\n        }\r\n        String plTitle = scan.nextLine();\r\n        try {\r\n            theHub.deletePlayList(plTitle);\r\n        }\tcatch (NoPlayListFoundException ex) {\r\n            System.out.println (ex.getMessage());\r\n        }\r\n        System.out.println(\"Playlist deleted!\");\r\n    }\r\n\r\n    public void s() {\r\n        //save elements, albums, playlists\r\n        theHub.saveElements();\r\n        theHub.saveAlbums();\r\n        theHub.savePlayLists();\r\n        System.out.println(\"Elements, albums and playlists saved!\");\r\n    }\r\n\r\n    public void h() {\r\n        System.out.println(\"t: display the album titles, ordered by date\");\r\n        System.out.println(\"g: display songs of an album, ordered by genre\");\r\n        System.out.println(\"d: display songs of an album\");\r\n        System.out.println(\"u: display audiobooks ordered by author\");\r\n        System.out.println(\"c: add a new song\");\r\n        System.out.println(\"a: add a new album\");\r\n        System.out.println(\"+: add a song to an album\");\r\n        System.out.println(\"l: add a new audiobook\");\r\n        System.out.println(\"p: create a new playlist from existing songs and audio books\");\r\n        System.out.println(\"-: delete an existing playlist\");\r\n        System.out.println(\"s: save elements, albums, playlists\");\r\n        System.out.println(\"q: quit program\");\r\n    }\r\n\r\n}\r\n
===================================================================
diff --git a/ServerJMusicHub/src/View/commandController.java b/ServerJMusicHub/src/View/commandController.java
--- a/ServerJMusicHub/src/View/commandController.java	
+++ b/ServerJMusicHub/src/View/commandController.java	
@@ -211,18 +211,14 @@
     }
 
     public void h() {
-        System.out.println("t: display the album titles, ordered by date");
-        System.out.println("g: display songs of an album, ordered by genre");
-        System.out.println("d: display songs of an album");
-        System.out.println("u: display audiobooks ordered by author");
-        System.out.println("c: add a new song");
-        System.out.println("a: add a new album");
-        System.out.println("+: add a song to an album");
-        System.out.println("l: add a new audiobook");
-        System.out.println("p: create a new playlist from existing songs and audio books");
-        System.out.println("-: delete an existing playlist");
-        System.out.println("s: save elements, albums, playlists");
-        System.out.println("q: quit program");
+        System.out.println("> h:[SERVER] Start Server");
+        System.out.println("> c: add a new song");
+        System.out.println("> a: add a new album");
+        System.out.println("> +: add a song to an album");
+        System.out.println("> -: delete an existing playlist");
+        System.out.println("> p: create a new playlist from existing songs and audio books");
+        System.out.println("> s: save elements, albums, playlists");
+        System.out.println("> q: quit program");
     }
 
 }
